//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GenresReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenreDto", Namespace="http://schemas.datacontract.org/2004/07/MC.Business.DTOs")]
    public partial class GenreDto : GenresReference.BaseDto
    {
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDto", Namespace="http://schemas.datacontract.org/2004/07/MC.Business.DTOs")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GenresReference.GenreDto))]
    public partial class BaseDto : object
    {
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GenresReference.IGenres")]
    public interface IGenres
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/GetAllByName", ReplyAction="http://tempuri.org/IGenres/GetAllByNameResponse")]
        System.Threading.Tasks.Task<GenresReference.GenreDto[]> GetAllByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/GetAll", ReplyAction="http://tempuri.org/IGenres/GetAllResponse")]
        System.Threading.Tasks.Task<GenresReference.GenreDto[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/GetById", ReplyAction="http://tempuri.org/IGenres/GetByIdResponse")]
        System.Threading.Tasks.Task<GenresReference.GenreDto> GetByIdAsync(int genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/Create", ReplyAction="http://tempuri.org/IGenres/CreateResponse")]
        System.Threading.Tasks.Task<string> CreateAsync(GenresReference.GenreDto genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/Update", ReplyAction="http://tempuri.org/IGenres/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(GenresReference.GenreDto genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenres/Delete", ReplyAction="http://tempuri.org/IGenres/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(int genreId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IGenresChannel : GenresReference.IGenres, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class GenresClient : System.ServiceModel.ClientBase<GenresReference.IGenres>, GenresReference.IGenres
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GenresClient() : 
                base(GenresClient.GetDefaultBinding(), GenresClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.GenreService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GenresClient(EndpointConfiguration endpointConfiguration) : 
                base(GenresClient.GetBindingForEndpoint(endpointConfiguration), GenresClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GenresClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GenresClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GenresClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GenresClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GenresClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<GenresReference.GenreDto[]> GetAllByNameAsync(string name)
        {
            return base.Channel.GetAllByNameAsync(name);
        }
        
        public System.Threading.Tasks.Task<GenresReference.GenreDto[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<GenresReference.GenreDto> GetByIdAsync(int genreId)
        {
            return base.Channel.GetByIdAsync(genreId);
        }
        
        public System.Threading.Tasks.Task<string> CreateAsync(GenresReference.GenreDto genre)
        {
            return base.Channel.CreateAsync(genre);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(GenresReference.GenreDto genre)
        {
            return base.Channel.UpdateAsync(genre);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(int genreId)
        {
            return base.Channel.DeleteAsync(genreId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.GenreService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.GenreService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:50703/Genres.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return GenresClient.GetBindingForEndpoint(EndpointConfiguration.GenreService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return GenresClient.GetEndpointAddress(EndpointConfiguration.GenreService);
        }
        
        public enum EndpointConfiguration
        {
            
            GenreService,
        }
    }
}
